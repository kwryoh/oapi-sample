openapi: 3.0.0
info:
  title: Sample item OpenAPI
  version: '1.0'
  description: It's sample API Document
  contact:
    name: Ryoh Kawai
    email: kawairyoh@gmail.com
    url: 'https://github.com/kwryoh'
  license:
    name: MIT
servers:
  - url: 'http://localhost:9000'
paths:
  /items:
    get:
      summary: Get item list
      operationId: getItems
      description: 商品情報を取得
      responses:
        '200':
          $ref: '#/components/responses/getItemsResponse'
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
      tags:
        - item
    post:
      summary: Create Item
      operationId: postItems
      description: 商品情報の登録
      tags:
        - item
      responses:
        '201':
          description: Created
        '403':
          $ref: '#/components/responses/errorResponse'
        '500':
          $ref: '#/components/responses/errorResponse'
      requestBody:
        $ref: '#/components/requestBodies/postItemsRequest'
    parameters: []
  '/items/{item_id}':
    parameters:
      - $ref: '#/components/parameters/item_id'
    get:
      summary: Get Item
      responses:
        '200':
          $ref: '#/components/responses/getItemResponse'
        '404':
          description: Not Found
      operationId: getItemById
      description: 商品情報を取得
      tags:
        - item
    delete:
      summary: Delete item
      operationId: deleteItem
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/errorResponse'
      description: 商品情報を単体削除
      tags:
        - item
    patch:
      summary: Update item
      operationId: patchItem
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/errorResponse'
      description: 商品情報を更新
      tags:
        - item
      requestBody:
        $ref: '#/components/requestBodies/postItemsRequest'
components:
  schemas:
    item:
      title: item
      type: object
      description: 商品モデル
      x-examples:
        application/json:
          value:
            id: 1000
            code: CODE001
            name: undefined
            unit: qty
            cost: 0
            created_at: '2021-01-31T23:59:59+09:00'
            updated_at: '2021-01-31T23:59:59+09:00'
      properties:
        id:
          $ref: '#/components/schemas/id'
        code:
          type: string
          pattern: '^[A-Z][A-Z0-9]+'
          example: CODE001
          description: 商品コード
        name:
          type: string
          default: undefined
          description: 商品名
          example: Item 001
        unit:
          type: string
          description: 単位
          example: qty
        cost:
          type: number
          default: 0
          description: 原価
          format: float
          minimum: 0
          maximum: 10000000000000
        created_at:
          type: string
          format: date-time
          description: 作成日時
          example: '2021-01-31T23:59:59+09:00'
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: 更新日時
          example: '2021-01-31T23:59:59+09:00'
          readOnly: true
      required:
        - id
        - code
        - name
        - unit
        - cost
        - created_at
        - updated_at
    id:
      type: integer
      title: Id
      description: 主キー型
      x-go-type: uint64
      format: int64
      example: 1000
      minimum: 0
      default: 0
      readOnly: true
      x-examples:
        application/json:
          value: 0
  securitySchemes: {}
  parameters:
    item_id:
      name: item_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/id'
      description: 商品ID
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 10
      description: ページ数
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
      description: 閲覧ページ
  responses:
    getItemsResponse:
      description: GET /items/ response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/item'
                readOnly: true
            required:
              - items
          examples: {}
    getItemResponse:
      description: 'GET /items/:item_id response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/item'
          examples: {}
    errorResponse:
      description: error response data
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                description: HTTP status code
                format: int64
                example: 403
                minimum: 400
                maximum: 600
                exclusiveMaximum: true
                readOnly: true
              message:
                type: string
                description: Error message
                example: Forbidden
                readOnly: true
            required:
              - code
              - message
          examples:
            application/json:
              value:
                code: 403
                message: Forbidden
  requestBodies:
    postItemsRequest:
      content:
        application/json:
          schema:
            type: object
            description: 商品登録時の商品情報
            properties:
              value:
                type: object
                properties:
                  code:
                    type: string
                    pattern: '^[A-Z][A-Z0-9]+'
                    description: 商品コード
                    example: ITM0001
                  name:
                    type: string
                    description: 商品名
                    example: item 0001
                  unit:
                    type: string
                    description: 単位
                    example: qty
                  cost:
                    type: number
                    format: float
                    description: 原価
                    example: 1.5
            required:
              - name
              - unit
              - cost
              - code
          examples:
            body:
              value:
                code: ITM0001
                name: item 0001
                unit: qty
                cost: 1.5
      description: ''
security:
  - APIKey: []
tags:
  - name: item
