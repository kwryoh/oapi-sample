// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetItems
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams)
	// PostItems
	// (POST /items)
	PostItems(w http.ResponseWriter, r *http.Request)
	// DeleteItemById
	// (DELETE /items/{item_id})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Get Item
	// (GET /items/{item_id})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// PatchItemById
	// (PATCH /items/{item_id})
	PatchItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostItems(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchItemById operation middleware
func (siw *ServerInterfaceWrapper) PatchItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.PostItems)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{item_id}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{item_id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/items/{item_id}", wrapper.PatchItemById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXX4/bRBD/KtGAxAO+s1tOSPUT116pLAR3KjxxCmjPniRuba9vd902ivxwiYC2UDhR",
	"0RJA/BM8ISr+PRT1Dx/G56D7FmjXduLYTtNcQbycbN/szG9+85uZzQBs6oc0wEBwMAcQEkZ8FMjUmyvQ",
	"f9d15KOD3GZuKFwagAnpZ++ntw+sLdDAle8hET3QICA+gjk9pgHD/chl6IApWIQacLuHPpH+nmfYAROe",
	"02fx9ey/XLcciGMNPNd3RT320f2bx+PDIvJ+hKw/C52dKQcS/VBhCgR2kSnHtNPh2OA5Gf6ZDP9KRg+T",
	"0fVk9IV8GN5fECj38cRIsSSAhzTgqOi8mL9YAn35btNAYKCAkDD0XJtIIPolLtEMnpYs6UzFmk/m/DXi",
	"hx62CgQQa3MA+EoIQkZDZMLFqS7mH5Yj1Ap+CGOkr+qQf6B7l9AWT5dDXBCuolpOkzweJMOfk9HD9OsP",
	"QYMOZT4RWVle3lCSJM524PULSQpXeBKFJfVaKaEG19a6dC3/GmUuYg2KAjY1RTL6Phl9kIx+Aq3Cmk0d",
	"XHhq+LvS3Q3QALOswYRz21vnDeOU9ESEQCbt39ndXHu7Lf8Ya2faL85Ac8HcoCvh2ZTn6u6QyBNgGlVi",
	"04+/OXr8XZmejkeJmDkLIn9PalgDmyER6Gw2deKjrybXDyd3f5yMh2VfDhG4Jlwfm+iugs3Gy7JxUPRd",
	"KSmIAgc7boCycE2cpoe3mtiJgqapkt76/OhRs33oLCJg8uUfkzu/PBMBcXlI7oKamkooecY53ryo5XKU",
	"kbVLOpbarPaWFHIuKynFWL4L0uUqpOrhthoP+xFy8SR1/z1+cPzRb5PxMDm4l32ZjN5Lv/31xGI/obBP",
	"KOaZiP4juVTKubiSpYqVaW8cim7QocW0JrZCgz5xPTDhMrlKXNanvVe68su6Tf3ZjrrYp73Wa9JCBmfS",
	"vidEyE1d77qiF+1Jc/3yVXkeasPXEi/wFs8G8OaO1dqiduTLZSE3s41yHJuDItTr1ltqxOcpvZkdk9Jq",
	"bYcYbO5YoMEVZDzzfWrdkOY0xICELpjw0rqxbmRy6Cn96NPV0m1a1WXtJcNP00/upI/vgvLI1A6TqwEu",
	"oMhWnTZ3sdltnjczEz27RsTaUsP8GhC3K6v+tGEsGmtTO31+HavdFvk+Yf156PVGDZv7oMzJwb2sVWuc",
	"7FA+9cwy5Z2lTv9fu4+U1RzX70CnjVOrEVPhpQy/Skys5bLRB/kVNM5Y8lDgcg3Jlr6d3rh5PP6hxtqW",
	"8iEDn+1b2c12LqmNuvs3aOtcTmiswUaziWi9SqPAqSRZi1aXwLN3RXMixqrVWTG1CyhaxaSr63qlJi1+",
	"ZsjmC4mwe0sJyfZ1vSXk4f+Pkmr4mqylNbIrBS2zSW7qukdt4vUoF+YZwzAUF/n5QfnnGIe4Hf8TAAD/",
	"/12UYHDtDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

