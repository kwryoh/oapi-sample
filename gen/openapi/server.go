// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get item list
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams)
	// Create Item
	// (POST /items)
	PostItems(w http.ResponseWriter, r *http.Request)
	// Delete item
	// (DELETE /items/{item_id})
	DeleteItem(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Get Item
	// (GET /items/{item_id})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Update item
	// (PATCH /items/{item_id})
	PatchItem(w http.ResponseWriter, r *http.Request, itemId ItemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostItems(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItem(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchItem operation middleware
func (siw *ServerInterfaceWrapper) PatchItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchItem(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.PostItems)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{item_id}", wrapper.DeleteItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{item_id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/items/{item_id}", wrapper.PatchItem)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
