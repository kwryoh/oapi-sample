// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get item list
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams)
	// Create Item
	// (POST /items)
	PostItems(w http.ResponseWriter, r *http.Request)
	// Delete item
	// (DELETE /items/{item_id})
	DeleteItem(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Get Item
	// (GET /items/{item_id})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Update item
	// (PATCH /items/{item_id})
	PatchItem(w http.ResponseWriter, r *http.Request, itemId ItemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostItems(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItem(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchItem operation middleware
func (siw *ServerInterfaceWrapper) PatchItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, APIKeyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchItem(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.PostItems)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{item_id}", wrapper.DeleteItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{item_id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/items/{item_id}", wrapper.PatchItem)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///f5cI/ABMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
