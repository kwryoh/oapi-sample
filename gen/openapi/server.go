// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get item list
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams)
	// Create Item
	// (POST /items)
	PostItems(w http.ResponseWriter, r *http.Request)
	// Delete item
	// (DELETE /items/{item_id})
	DeleteItem(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Get Item
	// (GET /items/{item_id})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Update item
	// (PATCH /items/{item_id})
	PatchItem(w http.ResponseWriter, r *http.Request, itemId ItemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostItems(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItem(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchItem operation middleware
func (siw *ServerInterfaceWrapper) PatchItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchItem(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.PostItems)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{item_id}", wrapper.DeleteItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{item_id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/items/{item_id}", wrapper.PatchItem)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
