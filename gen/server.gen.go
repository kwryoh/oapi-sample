// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetItems
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams)
	// PostItems
	// (POST /items)
	PostItems(w http.ResponseWriter, r *http.Request)
	// DeleteItemById
	// (DELETE /items/{item_id})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// Get Item
	// (GET /items/{item_id})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
	// PatchItemById
	// (PATCH /items/{item_id})
	PatchItemById(w http.ResponseWriter, r *http.Request, itemId ItemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostItems(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchItemById operation middleware
func (siw *ServerInterfaceWrapper) PatchItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "item_id" -------------
	var itemId ItemId

	err = runtime.BindStyledParameter("simple", false, "item_id", chi.URLParam(r, "item_id"), &itemId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter item_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchItemById(w, r, itemId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.PostItems)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{item_id}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{item_id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/items/{item_id}", wrapper.PatchItemById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXXW/cVBP+K6t5X4kLnNgpEVJ9RdqUykKQqHBFtKATe3bXxfZxzjluu1r5IrsC2kIh",
	"oqIlgPgSXCEqvi6K+sGPcbwo/wKdY3vttZ1uNwVxE9nOnJlnnnlm5uwIbOqHNMBAcDBHEBJGfBTI1Jsr",
	"0H/bdeSjg9xmbihcGoAJ6afvpbf3rU3QwJXvIRED0CAgPoI5O6YBw73IZeiAKViEGnB7gD6R/v7PsAcm",
	"/E8v4+vZf7luORDHGniu74pm7KP7N48PD4rIexGyYRk6O1MNJIahwhQI7CNTjmmvx7HFczL+Ixn/mUwe",
	"JpPryeRz+TC+f0Kg3McTI8WSAB7SgKOi81L+Ygn05btNA4GBAkLC0HNtIoHol7lEM3pasqQzFWs+mQvX",
	"iB962CkQQKzNAeBLIQgZDZEJF2e6mH9YjFAr+CGMkaGqQ/6B7l5GWzxdDnFBuIpqOW3yeJCMf0omD9Ov",
	"PgANepT5RGRleXFdSZI4W4E3LCQpXOFJFJbUa62EGlxb6dOV/GuUuYg1KArY1hTJ5Ltk8n4y+RG0Gms2",
	"dfDEU+PflO5ugAaYZQ0mnN/avGAYa9ITEQKZtH9rZ2Plza78Y6yc7T5fguaCuUFfwrMpz9XdI5EnwDTq",
	"xKYffX30+NsqPT2PElE6CyJ/V2pYA5shEdhG9KMvp9cPpnd/mB6Oq54cInBFuD62kV2Hmg2XRcOg6LpK",
	"ShAFDvbcAGXZ2hhND261cRMFbTMlvfXZ0aN2+9BpT3/6xe/TOz8/U/pxdUDugJqYSiR5vjnavKBlKUpU",
	"3Yp+pSbrPSUFnMtJSjCW74L0uQqnererxsJehFw8SdV/HT44/vDX6eE42b+XfZlO3k2/+eXUIj+loE8p",
	"4lI+/5JQaqU8uYqVilVpbx2GbtCjxZQmtkKDPnE9MOEdcpW4bEgHL/Xll1Wb+uVuujSkg84r0kIGZ9J+",
	"IETITV3vu2IQ7UpznV1VTqAxdS3xHO/wbPJubFudTWpHvtwSciXbKOewOSpivWq9oWZ7ntPr2TGprc5W",
	"iMHGtgUaXEHGM99rq4Y0pyEGJHTBhBdWjVUj08NACUif7ZR+246uii8Zf5J+fCd9fBeUR6aWl9wJcBFF",
	"tuO0uRvNTvuoKU307P4QawsN8/0fd2s7/oxhnDTRZnb6/B5WSy3yfcKG89CbnRq2N0KVk/17Wa82ONmm",
	"fOaZZdI7R53hP3YRqco5bl5+zhhryxFT46UKv05MrOWy0Uf53TPOWPJQ4GINyZ6+nd64eXz4fYO1TeVD",
	"Bj43tLIr7VxS6033r9HO+ZzQWIP1dhPReZlGgVNLshGtKYFn74r2RIxlq7NkahdRdIpR19T1Uk1a/L6Q",
	"zRcSYQ8WEpIt62ZLyMP/HSX18A1ZS2tkVwpaylFu6rpHbeINKBfmWcMwFBf5+VH1dxiHuBv/HQAA///I",
	"Zird5g0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

